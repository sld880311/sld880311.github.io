<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一蓑烟雨任平生</title>
  
  <subtitle>个人成长日记</subtitle>
  <link href="https://www.sunliaodong.cn/atom.xml" rel="self"/>
  
  <link href="https://www.sunliaodong.cn/"/>
  <updated>2021-02-04T12:27:47.502Z</updated>
  <id>https://www.sunliaodong.cn/</id>
  
  <author>
    <name>Theodore Sun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java系统化学习之集合概述</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9B%86%E5%90%88%E6%A6%82%E8%BF%B0/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9B%86%E5%90%88%E6%A6%82%E8%BF%B0/</id>
    <published>2021-02-04T12:19:31.000Z</published>
    <updated>2021-02-04T12:27:47.502Z</updated>
    
    
    <summary type="html">&lt;p&gt;使用集合需要考虑几个关注点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;线程安全性&lt;/li&gt;
&lt;li&gt;是否有序&lt;/li&gt;
&lt;li&gt;是否重复&lt;/li&gt;
&lt;li&gt;关注查询还是关注写入&lt;/li&gt;
&lt;li&gt;equals和hashCode方法的重写需要同步&lt;/li&gt;
&lt;li&gt;使用接口返回集合数据&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="集合" scheme="https://www.sunliaodong.cn/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Java系统化学习之HashMap</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BHashMap/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BHashMap/</id>
    <published>2021-02-04T12:08:50.000Z</published>
    <updated>2021-02-04T12:17:19.164Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;HashMap是一种使用&lt;strong&gt;数组+链表+红黑树&lt;/strong&gt;数据结构实现的Map&lt;/li&gt;
&lt;li&gt;HashMap 根据键的 hashCode 值存储数据，大多数情况下可以直接定位到它的值，因而具有很快的访问速度，但遍历顺序不确定。&lt;/li&gt;
&lt;li&gt;HashMap只允许一个key为null，允许多个value为null&lt;/li&gt;
&lt;li&gt;HashMap 非线程安全，可以用 Collections 的 synchronizedMap 方法使 HashMap 具有线程安全的能力，或者使用 ConcurrentHashMap。&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    <category term="源码分析" scheme="https://www.sunliaodong.cn/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="集合" scheme="https://www.sunliaodong.cn/tags/%E9%9B%86%E5%90%88/"/>
    
    <category term="HashMap" scheme="https://www.sunliaodong.cn/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>Java系统化学习之Type</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BType/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BType/</id>
    <published>2021-02-04T11:06:39.000Z</published>
    <updated>2021-02-04T11:08:12.975Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;这里的Type指java.lang.reflect.Type, 是Java中所有类型的公共高级接口, 代表了Java中的所有类型. Type体系中类型的包括：数组类型(GenericArrayType)、参数化类型(ParameterizedType)、类型变量(TypeVariable)、通配符类型(WildcardType)、原始类型(Class)、基本类型(Class), 以上这些类型都实现Type接口.  &lt;/p&gt;
&lt;p&gt;Type 表示的全部类型而每个Class对象表示一个具体类型的实例，如String.class仅代表String类型。由此看来Type与 Class 表示类型几乎是相同的（Class实现接口Type），只不过 Type表示的范围比Class要广得多而已。当然Type还有其他子类。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参数化类型（ParameterizedType）：有原始类型和具体的类型参数，泛型List&lt;String&gt;、Map；&lt;/String&gt;&lt;/li&gt;
&lt;li&gt;数组类型（GenericArrayType）：不是数组String[] 、byte[]，而是带有泛型的数组，即T[] ；&lt;/li&gt;
&lt;li&gt;通配符类型（WildcardType）： 指的是&amp;lt;?&amp;gt;, &amp;lt;? extends T&amp;gt;等等&lt;/li&gt;
&lt;li&gt;原始类型（Class）： 不仅仅包含我们平常所指的类，还包括枚举、数组、注解等；&lt;/li&gt;
&lt;li&gt;基本类型（Class）, 也就是我们所说的java的基本类型，即int,float,double等&lt;/li&gt;
&lt;li&gt;类型变量(TypeVariable)：表示类型参数，可以有上界，比如：T extends Number&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    <category term="源码分析" scheme="https://www.sunliaodong.cn/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="Type" scheme="https://www.sunliaodong.cn/tags/Type/"/>
    
    <category term="反射" scheme="https://www.sunliaodong.cn/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Java系统化学习之String</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BString/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BString/</id>
    <published>2021-02-04T11:00:22.000Z</published>
    <updated>2021-02-04T11:05:47.575Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;String介绍&quot;&gt;&lt;a href=&quot;#String介绍&quot; class=&quot;headerlink&quot; title=&quot;String介绍&quot;&gt;&lt;/a&gt;String介绍&lt;/h2&gt;&lt;h3 id=&quot;API描述&quot;&gt;&lt;a href=&quot;#API描述&quot; class=&quot;headerlink&quot; title=&quot;API描述&quot;&gt;&lt;/a&gt;API描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在&lt;code&gt;java.lang.String&lt;/code&gt;的源码中明确说明，&lt;code&gt;String&lt;/code&gt;类表示字符串，Java中所有的字符串传字面值（如：”abc”）都是该类的实例；并且字符串是常量，一旦创建之后则不可以改变，String buffers支持可变的字符串。因为&lt;code&gt;String&lt;/code&gt;对象是不可变的，但是可以共享。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; * The &amp;#123;&lt;span class=&quot;meta&quot;&gt;@code&lt;/span&gt; String&amp;#125; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;represents&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;strings&lt;/span&gt;. &lt;span class=&quot;title&quot;&gt;All&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt; * &lt;span class=&quot;title&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;literals&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Java&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;programs&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;such&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;as&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;span class=&quot;meta&quot;&gt;@code&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&amp;#125;, are&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * implemented as instances of &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; class.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;lt;p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Strings are constant; their values cannot be changed after they&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * are created. String buffers support mutable strings.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Because String objects are immutable they can be shared.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;java&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;io&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Serializable&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;    &lt;span class=&quot;title&quot;&gt;Comparable&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;&amp;gt;, &lt;span class=&quot;title&quot;&gt;CharSequence&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过API定义总结以下信息：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用final修饰，则不能被继承（该类中的成员方法默认都是final）&lt;/li&gt;
&lt;li&gt;实现接口&lt;code&gt;Serializable&lt;/code&gt;，说明可以进行序列化&lt;/li&gt;
&lt;li&gt;实现接口&lt;code&gt;Comparable&lt;/code&gt;,说明可以大小比较&lt;/li&gt;
&lt;li&gt;实现接口&lt;code&gt;CharSequence&lt;/code&gt;,说明String本身就是char类型的数组，而且通过成员变量定义可以进行佐证&lt;/li&gt;
&lt;li&gt;通过char字符数组实现&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    <category term="源码分析" scheme="https://www.sunliaodong.cn/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="String" scheme="https://www.sunliaodong.cn/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Java系统化学习之传递方式</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BC%A0%E9%80%92%E6%96%B9%E5%BC%8F/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BC%A0%E9%80%92%E6%96%B9%E5%BC%8F/</id>
    <published>2021-02-04T10:56:04.000Z</published>
    <updated>2021-02-04T10:57:55.674Z</updated>
    
    
    <summary type="html">&lt;p&gt;在Java中的方法调用使用的都是&lt;strong&gt;值传递&lt;/strong&gt;，Java 中的所有自变量或参数传递都是通过传递句柄进行的。也就是说，当我们传递“一个对象”时，&lt;strong&gt;实际传递的只是指向位于方法外部的那个对象的“一个句柄”&lt;/strong&gt;。所以一旦要对那个句柄进行任何修改，便相当于修改外部对象。此外：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;■参数传递过程中会自动产生别名问题&lt;/li&gt;
&lt;li&gt;■不存在本地对象，只有本地句柄&lt;/li&gt;
&lt;li&gt;■句柄有自己的作用域，而对象没有&lt;/li&gt;
&lt;li&gt;■对象的“存在时间”在 Java 里不是个问题&lt;/li&gt;
&lt;li&gt;■没有语言上的支持（如常量）可防止对象被修改（以避免别名的副作用）&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="传递方式" scheme="https://www.sunliaodong.cn/tags/%E4%BC%A0%E9%80%92%E6%96%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java系统化学习之克隆</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%85%8B%E9%9A%86/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%85%8B%E9%9A%86/</id>
    <published>2021-02-04T10:49:16.000Z</published>
    <updated>2021-02-04T10:50:17.212Z</updated>
    
    
    <summary type="html">&lt;p&gt;所谓克隆就是对原有对象复用的复用，&lt;strong&gt;Java语言中克隆针对的是类的实例（对象）&lt;/strong&gt;，在Java中一共有三种方式实现。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接赋值&lt;/li&gt;
&lt;li&gt;浅拷贝&lt;/li&gt;
&lt;li&gt;深拷贝&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="clone" scheme="https://www.sunliaodong.cn/tags/clone/"/>
    
    <category term="克隆" scheme="https://www.sunliaodong.cn/tags/%E5%85%8B%E9%9A%86/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate系统化学习之常用方法</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Hibernate%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Hibernate%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2021-02-04T10:40:28.000Z</published>
    <updated>2021-02-04T10:42:34.548Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;session-find-load&quot;&gt;&lt;a href=&quot;#session-find-load&quot; class=&quot;headerlink&quot; title=&quot;session.find/load&quot;&gt;&lt;/a&gt;session.find/load&lt;/h2&gt;&lt;p&gt;hibernate中session.find/load方法都能通过指定实体类名和id从数据库中读取指定的记录，并且返回与之对映的实体对象。但是它们也有很大的区别 ,find()和load()方法在执行检索时的区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;find()在类检索级别时总是执行立即检索而且如果检索不到相关的对象的话会返回null,load()方法则会抛出一个ObjectNotException&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;load()方法可返回一个实体代理类类型，而find()方法直接返回的是实体类对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;load()方法可以充分利用内部缓存和二级缓存，而find()方法会忽略二级缓存，若内部缓存没有查询到会到数据库中去查询。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    <category term="Hibernate" scheme="https://www.sunliaodong.cn/categories/Hibernate/"/>
    
    <category term="开源框架" scheme="https://www.sunliaodong.cn/categories/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="Hibernate" scheme="https://www.sunliaodong.cn/tags/Hibernate/"/>
    
    <category term="常用方法" scheme="https://www.sunliaodong.cn/tags/%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate系统化学习之缓存</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Hibernate%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%BC%93%E5%AD%98/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Hibernate%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%BC%93%E5%AD%98/</id>
    <published>2021-02-04T10:40:16.000Z</published>
    <updated>2021-02-04T10:43:11.756Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;N-1问题&quot;&gt;&lt;a href=&quot;#N-1问题&quot; class=&quot;headerlink&quot; title=&quot;N+1问题&quot;&gt;&lt;/a&gt;N+1问题&lt;/h2&gt;&lt;p&gt;所谓N+1问题，使用hibernate查询数据，首先返回数据的id信息，并没有返回所有的对象信息，只有在真正使用的时候，在使用这个id对数据库中查询数据，一次查询多次调用数据库（缓存）的情况，就是所谓的N+1问题。以下方法或者策略会出现N+1问题：&lt;/p&gt;
&lt;h3 id=&quot;使用iterate（）方法&quot;&gt;&lt;a href=&quot;#使用iterate（）方法&quot; class=&quot;headerlink&quot; title=&quot;使用iterate（）方法&quot;&gt;&lt;/a&gt;使用iterate（）方法&lt;/h3&gt;&lt;p&gt;存在iterator的原因是，有可能会在一个session中查询两次数据，如果使用list每一次都会把所有的对象查询上来，如果使用iterator仅仅只会查询id，此时所有的对象已经存储在一级缓存(session的缓存)中，可以直接获取&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Return the query results as an &amp;lt;tt&amp;gt;Iterator&amp;lt;/tt&amp;gt;. If the query&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* contains multiple results per row, the results are returned in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* an instance of &amp;lt;tt&amp;gt;Object[]&amp;lt;/tt&amp;gt;.&amp;lt;br&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;lt;br&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Entities returned as results are initialized on demand. The first&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* SQL query returns identifiers only.&amp;lt;br&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; the result iterator&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Iterator&amp;lt;R&amp;gt; &lt;span class=&quot;title&quot;&gt;iterate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    <category term="Hibernate" scheme="https://www.sunliaodong.cn/categories/Hibernate/"/>
    
    <category term="开源框架" scheme="https://www.sunliaodong.cn/categories/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="Hibernate" scheme="https://www.sunliaodong.cn/tags/Hibernate/"/>
    
    <category term="缓存" scheme="https://www.sunliaodong.cn/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate系统化学习之对象状态</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Hibernate%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%AF%B9%E8%B1%A1%E7%8A%B6%E6%80%81/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Hibernate%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%AF%B9%E8%B1%A1%E7%8A%B6%E6%80%81/</id>
    <published>2021-02-04T10:37:05.000Z</published>
    <updated>2021-02-04T10:39:42.025Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;style type=&quot;text/css&quot;&gt;
.tg  {border-collapse:collapse;border-color:#C44D58;border-spacing:0;}
.tg td{background-color:#F9CDAD;border-color:#C44D58;border-style:solid;border-width:1px;color:#002b36;
  font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg th{background-color:#FE4365;border-color:#C44D58;border-style:solid;border-width:1px;color:#fdf6e3;
  font-family:Arial, sans-serif;font-size:14px;font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-0lax{text-align:left;vertical-align:top}
&lt;/style&gt;
&lt;table class=&quot;tg&quot;&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-0lax&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;状态&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/th&gt;
    &lt;th class=&quot;tg-0lax&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;说明&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0lax&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;临时状态（Transient）&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
    &lt;td class=&quot;tg-0lax&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;刚创建的对象（new）还没有被Session持久化、缓存中不存在这个对象的数据并且数据库中没有这个对象对应的数据为瞬时状态这个时候是没有OID。&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0lax&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;持久状态（Persistent）&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
    &lt;td class=&quot;tg-0lax&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;对象经过Session持久化操作，缓存中存在这个对象的数据为持久状态并且数据库中存在这个对象对应的数据为持久状态这个时候有OID。&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0lax&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;游离状态（Detached）&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
    &lt;td class=&quot;tg-0lax&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;已经被持久化，但不处于session的缓存中。&amp;nbsp;&amp;nbsp;&amp;nbsp;当Session关闭，缓存中不存在这个对象数据而数据库中有这个对象的数据并且有OID为游离状态。&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    <category term="Hibernate" scheme="https://www.sunliaodong.cn/categories/Hibernate/"/>
    
    <category term="开源框架" scheme="https://www.sunliaodong.cn/categories/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="对象状态" scheme="https://www.sunliaodong.cn/tags/%E5%AF%B9%E8%B1%A1%E7%8A%B6%E6%80%81/"/>
    
    <category term="Hibernate" scheme="https://www.sunliaodong.cn/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Java系统化学习之异常</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%BC%82%E5%B8%B8/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%BC%82%E5%B8%B8/</id>
    <published>2021-02-04T09:36:56.000Z</published>
    <updated>2021-02-04T09:43:09.960Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在Java中任务或方法的运行，要不就是正常执行完成(包括虚拟机退出，比如&lt;code&gt;System.exit()&lt;/code&gt;)，要不就是出现异常终止(&lt;code&gt;Throwable&lt;/code&gt;)。本章节重点讲解在Java中对异常的处理。当程序出现异常之后，Java会抛出一个封装好的异常堆栈信息，并且终止当前的方法，异常处理机制会将代码执行交给异常处理器。整体结构如下图所示：&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;

&lt;img src=&quot;/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%BC%82%E5%B8%B8/1587714125412.png&quot; class title=&quot;Java异常架构图&quot;&gt;

&lt;/div&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="异常" scheme="https://www.sunliaodong.cn/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Java系统化学习之泛型</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%B3%9B%E5%9E%8B/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%B3%9B%E5%9E%8B/</id>
    <published>2021-02-04T09:33:34.000Z</published>
    <updated>2021-02-04T09:34:16.124Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;泛型在JDK1.5引入，其本质是一种&lt;strong&gt;参数化类型（Parameterized Type），在使用时传入实际类型即可&lt;/strong&gt;，即可以将操作的数据类型指定为方法签名中的一种特殊参数,可以作用在类、接口、方法中。泛型是编译期的一种概念，主要是用于编译期类型安全检查（编译之后泛型会被擦除）。&lt;/p&gt;
&lt;h3 id=&quot;常用泛型类型常量&quot;&gt;&lt;a href=&quot;#常用泛型类型常量&quot; class=&quot;headerlink&quot; title=&quot;常用泛型类型常量&quot;&gt;&lt;/a&gt;常用泛型类型常量&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;E：元素（Element），多用于java集合框架&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;K：关键字（Key）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;N：数字（Number）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;T：类型（Type）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;V：值（Value）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="泛型" scheme="https://www.sunliaodong.cn/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java系统化学习之反射</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8F%8D%E5%B0%84/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8F%8D%E5%B0%84/</id>
    <published>2021-02-04T09:18:34.000Z</published>
    <updated>2021-02-04T09:35:26.046Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink&quot; title=&quot;知识点&quot;&gt;&lt;/a&gt;知识点&lt;/h3&gt;&lt;div align=&quot;center&quot;&gt;

&lt;img src=&quot;/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8F%8D%E5%B0%84/1587523711269.png&quot; class title=&quot;反射知识点&quot;&gt;

&lt;/div&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="反射" scheme="https://www.sunliaodong.cn/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Java系统化学习之内部类</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%86%85%E9%83%A8%E7%B1%BB/</id>
    <published>2021-02-04T09:16:48.000Z</published>
    <updated>2021-02-04T09:32:21.781Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;定义：外部类内部定义的类，类名不需要与文件名不同&lt;/li&gt;
&lt;li&gt;static修饰（静态内部类）&lt;/li&gt;
&lt;li&gt;作用域（public、default、protected、private）&lt;/li&gt;
&lt;li&gt;作用范围：编译期概念，一但编译成功就是有不同的class文件（outer.class和outer$inner.class），所以内部类的成员变量/方法名可以和外部类的相同。&lt;/li&gt;
&lt;li&gt;分类：静态内部类，成员内部类，局部内部类，匿名内部类四种。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h2&gt;&lt;p&gt;Ø 在一个方法内部使用&lt;br&gt;Ø 在方法的一个作用域中使用&lt;br&gt;Ø 一个匿名类，用于实现一个接口&lt;br&gt;Ø 一个匿名类，用于扩展拥有非默认构造器的类&lt;br&gt;Ø 一个匿名类，用于执行字段初始化&lt;br&gt;Ø 一个匿名类，通过实例初始化进行构建（匿名内部类不能拥有构造器)  &lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="内部类" scheme="https://www.sunliaodong.cn/tags/%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java高效编程技巧</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Java%E9%AB%98%E6%95%88%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Java%E9%AB%98%E6%95%88%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/</id>
    <published>2021-02-04T08:27:17.000Z</published>
    <updated>2021-02-04T08:30:34.594Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;Java代码规范&quot;&gt;&lt;a href=&quot;#Java代码规范&quot; class=&quot;headerlink&quot; title=&quot;Java代码规范&quot;&gt;&lt;/a&gt;Java代码规范&lt;/h2&gt;&lt;h3 id=&quot;命名规范（阿里规范）&quot;&gt;&lt;a href=&quot;#命名规范（阿里规范）&quot; class=&quot;headerlink&quot; title=&quot;命名规范（阿里规范）&quot;&gt;&lt;/a&gt;命名规范（阿里规范）&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;名称只能是有含义的英文，不能出现下划线或美元符号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方法名、参数名、成员变量、局部变量统一使用驼峰方式命名，形如lowerCamelCase&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类名使用UpperCamelCase命名，DO/BO/DTO/VO/AO/PO/UID除外&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常量或类变量都需要使用大写，并且中间使用下划线分割&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;抽象类必须以Abstract或Base开头，异常类，必须以Exception结果，测试类必须以待测试代码_Test&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类型与中括号紧挨相连来表示数组,形如&lt;code&gt;int[] arrayDemo&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;成员变量不能以is开头&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;包使用小写定义，并且使用单数，中间使用英文句号分割，并且定义必须有意义和唯一性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;子类与父类之间不要使用相同的成员变量命名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;完全杜绝不规范的缩写，尽量使用完整的单词&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在常量与变量命名时，表示类型的名称放在词尾&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果模块、接口、类、方法使用了设计模式，在命名时需体现出具体模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接口中不要定义变量，方式不需要增加任何修饰符，都必须有注释信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接口与实现类的命名规范是&lt;strong&gt;Service/**ServiceImpl、&lt;/strong&gt;DAO/**DAOImpl&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;枚举类名带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;各层命名规范：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Service/DAO 层方法命名规约&lt;ul&gt;
&lt;li&gt;获取单个对象的方法用 get 做前缀。&lt;/li&gt;
&lt;li&gt;获取多个对象的方法用 list 做前缀，复数形式结尾如：listObjects。&lt;/li&gt;
&lt;li&gt;获取统计值的方法用 count 做前缀。&lt;/li&gt;
&lt;li&gt;插入的方法用 save/insert 做前缀。&lt;/li&gt;
&lt;li&gt;删除的方法用 remove/delete 做前缀。&lt;/li&gt;
&lt;li&gt;修改的方法用 update 做前缀。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;领域模型命名规约&lt;ul&gt;
&lt;li&gt;数据对象：xxxDO，xxx 即为数据表名。&lt;/li&gt;
&lt;li&gt;数据传输对象：xxxDTO，xxx 为业务领域相关的名称。&lt;/li&gt;
&lt;li&gt;展示对象：xxxVO，xxx 一般为网页名称。&lt;/li&gt;
&lt;li&gt;POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="软件架构" scheme="https://www.sunliaodong.cn/categories/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="编程技巧" scheme="https://www.sunliaodong.cn/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Java系统化学习之注解</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%B3%A8%E8%A7%A3/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%B3%A8%E8%A7%A3/</id>
    <published>2021-02-04T08:15:21.000Z</published>
    <updated>2021-02-04T08:19:21.266Z</updated>
    
    
    <summary type="html">&lt;p&gt;在jdk1.5中引入了注解的概念，注解是Java提供的一种对类信息（包括：类、属性与方法）进行扩展的一种行为。Annatation(注解)是一个接口，程序可以通过反射来获取指定程序中元素的 Annotation 对象，然后通过该 Annotation 对象来获取注解中的元数据信息。通过使用注解，可以将元数据保存在 Java 源代码中。并拥有如下优势：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;简单易读的代码，&lt;/li&gt;
&lt;li&gt;编译器类型检查，&lt;/li&gt;
&lt;li&gt;使用 annotation API 为自己的注解构造处理工具。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="注解" scheme="https://www.sunliaodong.cn/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>eclipse使用技巧</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/eclipse%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/eclipse%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</id>
    <published>2021-02-04T07:51:43.000Z</published>
    <updated>2021-02-04T09:28:51.018Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;集成javap命令&quot;&gt;&lt;a href=&quot;#集成javap命令&quot; class=&quot;headerlink&quot; title=&quot;集成javap命令&quot;&gt;&lt;/a&gt;集成javap命令&lt;/h2&gt;&lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;eclipse中点击工具栏: Run &amp;gt; External Tools &amp;gt; External Tools Configuration&lt;/li&gt;
&lt;li&gt;双击”程序”&lt;/li&gt;
&lt;li&gt;修改配置&lt;/li&gt;
&lt;/ol&gt;
&lt;div align=&quot;center&quot;&gt;

&lt;img src=&quot;/2021/02/04/eclipse%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/1588039059895.png&quot; class title=&quot;执行javap&quot;&gt;

&lt;/div&gt;

&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Name: javap(随意)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location: jdk实际路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Working Directory:$&amp;#123;workspace_loc&amp;#125;\$&amp;#123;project_name&amp;#125; （不要改）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Arguments:-c -verbose  -classpath  $&amp;#123;workspace_loc&amp;#125;/ $&amp;#123;project_name&amp;#125;/bin/$&amp;#123;java_type_name&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="常用工具" scheme="https://www.sunliaodong.cn/categories/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="eclipse" scheme="https://www.sunliaodong.cn/tags/eclipse/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之单例模式</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-02-04T07:39:11.000Z</published>
    <updated>2021-02-04T07:48:28.890Z</updated>
    
    
    <summary type="html">&lt;p&gt;（Singleton Pattern、单态模式、单件模式、对象创建型模式），单例模式的特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构造方法私有化；(不能被实例化和继承)&lt;/li&gt;
&lt;li&gt;实例化的变量引用私有化；&lt;/li&gt;
&lt;li&gt;获取实例的方法共有。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;唯一的对象实例&lt;/li&gt;
&lt;li&gt;保证一个类仅有一个实例，并提供一个访问他的全局访问点&lt;/li&gt;
&lt;li&gt;有状态（可变的单例对象，可以组成状态仓库）、无状态（工具类）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;适用性&quot;&gt;&lt;a href=&quot;#适用性&quot; class=&quot;headerlink&quot; title=&quot;适用性&quot;&gt;&lt;/a&gt;适用性&lt;/h2&gt;&lt;p&gt;在下面的情况下可以使用Singleton模式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当类只能有一个实例而且客户可以从一个总所周知的访问点访问它时。&lt;/li&gt;
&lt;li&gt;当这个唯一实例应该是通过子类可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。&lt;/li&gt;
&lt;li&gt;系统只需要一个实例的对象，而这个对象又会被经常创建。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="软件架构" scheme="https://www.sunliaodong.cn/categories/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="设计模式" scheme="https://www.sunliaodong.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="单例模式" scheme="https://www.sunliaodong.cn/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>git详解</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/git%E8%AF%A6%E8%A7%A3/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/git%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-02-04T00:17:37.000Z</published>
    <updated>2021-02-04T06:19:24.459Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;提交本地工程到github&quot;&gt;&lt;a href=&quot;#提交本地工程到github&quot; class=&quot;headerlink&quot; title=&quot;提交本地工程到github&quot;&gt;&lt;/a&gt;提交本地工程到github&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &lt;span class=&quot;string&quot;&gt;&amp;quot;注释&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote add origin https://github.com/sld880311/parkspaceagent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git pull origin master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#如果出现fatal: refusing to merge unrelated histories&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;使用如下命令 git pull origin master --allow-unrelated-histories&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push -u origin master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="常用工具" scheme="https://www.sunliaodong.cn/categories/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    <category term="代码管理" scheme="https://www.sunliaodong.cn/categories/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="git" scheme="https://www.sunliaodong.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Javap详解</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Javap%E8%AF%A6%E8%A7%A3/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Javap%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-02-03T23:58:16.000Z</published>
    <updated>2021-02-04T01:18:35.201Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;命令&quot;&gt;&lt;a href=&quot;#命令&quot; class=&quot;headerlink&quot; title=&quot;命令&quot;&gt;&lt;/a&gt;命令&lt;/h2&gt;&lt;p&gt;javap 命令用于解析类文件。其输出取决于所用的选项。若没有使用选项，javap 将输出传递给它的类的 public 域及方法。javap 将其输出到标准输出设备上。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;用法: javap &amp;lt;options&amp;gt; &amp;lt;classes&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;其中, 可能的选项包括:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -help  --help  -?        输出此用法消息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -version                 版本信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -v  -verbose             输出附加信息,输出堆栈大小、各方法的 locals 及 args 数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -l                       输出行号和本地变量表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;                  仅显示公共类和成员&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt;               显示受保护的/公共类和成员&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt;                 显示程序包/受保护的/公共类和成员 (默认)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -p  -&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;             显示所有类和成员&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -c                       输出类中各方法的未解析的代码，即构成 Java 字节码的指令。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -s                       输出内部类型签名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -sysinfo                 显示正在处理的类的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           系统信息 (路径, 大小, 日期, MD5 散列)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -constants               显示最终常量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -classpath &amp;lt;path&amp;gt;        指定查找用户类文件的位置,如果设置了该选项，则它将覆盖缺省值或 CLASSPATH 环境变量。目录用冒号分隔。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -cp &amp;lt;path&amp;gt;               指定查找用户类文件的位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -bootclasspath &amp;lt;path&amp;gt;    覆盖引导类文件的位置,缺省情况下，自举类是实现核心 Java 平台的类，位于 jrelibt.jar 和 jrelibi18n.jar 中。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    <category term="常用工具" scheme="https://www.sunliaodong.cn/categories/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Javap" scheme="https://www.sunliaodong.cn/tags/Javap/"/>
    
    <category term="Class分析" scheme="https://www.sunliaodong.cn/tags/Class%E5%88%86%E6%9E%90/"/>
    
    <category term="JVM" scheme="https://www.sunliaodong.cn/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo+github+next部署个人博客</title>
    <link href="https://www.sunliaodong.cn/2021/02/03/%E4%BD%BF%E7%94%A8hexo-github-next%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://www.sunliaodong.cn/2021/02/03/%E4%BD%BF%E7%94%A8hexo-github-next%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-02-03T07:40:46.000Z</published>
    <updated>2021-02-04T06:10:18.965Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;h3 id=&quot;依赖环境&quot;&gt;&lt;a href=&quot;#依赖环境&quot; class=&quot;headerlink&quot; title=&quot;依赖环境&quot;&gt;&lt;/a&gt;依赖环境&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 修改原&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm config &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; registry http://registry.npm.taobao.org/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 改回去&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm config &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; registry https://registry.npmjs.org/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;初始化博客&quot;&gt;&lt;a href=&quot;#初始化博客&quot; class=&quot;headerlink&quot; title=&quot;初始化博客&quot;&gt;&lt;/a&gt;初始化博客&lt;/h3&gt;&lt;p&gt;使用npm安装hexo(&lt;a href=&quot;https://hexo.io/zh-cn/&quot;&gt;详细文档&lt;/a&gt;)，命令是&lt;code&gt;npm install -g hexo-cli&lt;/code&gt;,安装完成之后初始化博客,命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir sld880311.github.io&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; sld880311.github.io&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo init &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;初始化完成之后目录结构如下：&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="https://www.sunliaodong.cn/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="Hexo" scheme="https://www.sunliaodong.cn/tags/Hexo/"/>
    
    <category term="github" scheme="https://www.sunliaodong.cn/tags/github/"/>
    
    <category term="Next" scheme="https://www.sunliaodong.cn/tags/Next/"/>
    
  </entry>
  
</feed>
