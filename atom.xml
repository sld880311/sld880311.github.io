<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一蓑烟雨任平生</title>
  
  <subtitle>个人成长日记</subtitle>
  <link href="https://www.sunliaodong.cn/atom.xml" rel="self"/>
  
  <link href="https://www.sunliaodong.cn/"/>
  <updated>2021-02-05T12:04:17.134Z</updated>
  <id>https://www.sunliaodong.cn/</id>
  
  <author>
    <name>Theodore Sun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java并发编程之调度方式</title>
    <link href="https://www.sunliaodong.cn/2021/02/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%B0%83%E5%BA%A6%E6%96%B9%E5%BC%8F/"/>
    <id>https://www.sunliaodong.cn/2021/02/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%B0%83%E5%BA%A6%E6%96%B9%E5%BC%8F/</id>
    <published>2021-02-05T11:32:04.000Z</published>
    <updated>2021-02-05T12:04:17.134Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;抢占式调度&quot;&gt;&lt;a href=&quot;#抢占式调度&quot; class=&quot;headerlink&quot; title=&quot;抢占式调度&quot;&gt;&lt;/a&gt;抢占式调度&lt;/h2&gt;&lt;p&gt;抢占式调度指的是每条线程执行的时间、线程的切换都由系统控制，系统控制指的是在系统某种运行机制下，可能每条线程都分同样的执行时间片，也可能是某些线程执行的时间片较长，甚至某些线程得不到执行的时间片。在这种机制下，一个线程的堵塞不会导致整个进程堵塞。&lt;/p&gt;
&lt;h2 id=&quot;协同式调度&quot;&gt;&lt;a href=&quot;#协同式调度&quot; class=&quot;headerlink&quot; title=&quot;协同式调度&quot;&gt;&lt;/a&gt;协同式调度&lt;/h2&gt;&lt;p&gt;协同式调度指某一线程执行完后主动通知系统切换到另一线程上执行，这种模式就像接力赛一样，一个人跑完自己的路程就把接力棒交接给下一个人，下个人继续往下跑。线程的执行时间由线程本身控制，线程切换可以预知，不存在多线程同步问题，但它有一个致命弱点：如果一个线程编写有问题，运行到一半就一直堵塞，那么可能导致整个系统崩溃。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    <category term="并发编程" scheme="https://www.sunliaodong.cn/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="线程调度" scheme="https://www.sunliaodong.cn/tags/%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程之线程优先级</title>
    <link href="https://www.sunliaodong.cn/2021/02/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <id>https://www.sunliaodong.cn/2021/02/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7/</id>
    <published>2021-02-05T11:31:54.000Z</published>
    <updated>2021-02-05T12:02:08.746Z</updated>
    
    
    <summary type="html">&lt;p&gt;现代操作系统基本采用时分的形式调度运行的线程，操作系统会分出一个个时间片，线程会分配到若干时间片，当线程的时间片用完了就会发生线程调度，并等待着下次分配。线程分配到的时间片多少也就决定了线程使用处理器资源的多少，而线程优先级就是决定线程需要多或者少分配一些处理器资源的线程属性。优先级高的线程分配时间片的数量要多于优先级低的线程。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    <category term="并发编程" scheme="https://www.sunliaodong.cn/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    <category term="源码分析" scheme="https://www.sunliaodong.cn/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="线程优先级" scheme="https://www.sunliaodong.cn/tags/%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程之守护线程</title>
    <link href="https://www.sunliaodong.cn/2021/02/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B/"/>
    <id>https://www.sunliaodong.cn/2021/02/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-02-05T11:31:42.000Z</published>
    <updated>2021-02-05T12:01:07.188Z</updated>
    
    
    <summary type="html">&lt;p&gt;java中线程的分类：用户线程 (User Thread)、守护线程 (Daemon Thread)。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;守护线程&lt;/strong&gt;：在程序运行的时候在后台提供一种通用服务的线程，比如垃圾回收线程就是一个很称职的守护者，并且这种线程并不属于程序中不可或缺的部分。因此，当所有的非守护线程结束时，程序也就终止了，同时会杀死进程中的所有守护线程。反过来说，只要任何非守护线程还在运行，程序就不会终止。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;区别&lt;/strong&gt;：用户线程和守护线程两者几乎没有区别，唯一的不同之处就在于虚拟机的离开：如果用户线程已经全部退出运行了，只剩下守护线程存在了，虚拟机也就退出了。 因为没有了被守护者，守护线程也就没有工作可做了，也就没有继续运行程序的必要了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Java中的定义&quot;&gt;&lt;a href=&quot;#Java中的定义&quot; class=&quot;headerlink&quot; title=&quot;Java中的定义&quot;&gt;&lt;/a&gt;Java中的定义&lt;/h2&gt;&lt;p&gt;通过Thread中的setDaemon方法完成设置。通过源码分析得知：&lt;strong&gt;当线程只剩下守护线程的时候，JVM就会退出.但是如果还有其他的任意一个用户线程还在，JVM就不会退出&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    <category term="并发编程" scheme="https://www.sunliaodong.cn/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    <category term="源码分析" scheme="https://www.sunliaodong.cn/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="守护线程" scheme="https://www.sunliaodong.cn/tags/%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程之线程常用方法</title>
    <link href="https://www.sunliaodong.cn/2021/02/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://www.sunliaodong.cn/2021/02/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2021-02-05T11:31:31.000Z</published>
    <updated>2021-02-05T11:59:54.246Z</updated>
    
    
    <summary type="html">&lt;div align=&quot;center&quot;&gt;

&lt;img src=&quot;/2021/02/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/1590711795506.png&quot; class title=&quot;Runnable类图&quot;&gt;

&lt;/div&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    <category term="并发编程" scheme="https://www.sunliaodong.cn/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    <category term="源码分析" scheme="https://www.sunliaodong.cn/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="线程常用方法" scheme="https://www.sunliaodong.cn/tags/%E7%BA%BF%E7%A8%8B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    
    <category term="sleep" scheme="https://www.sunliaodong.cn/tags/sleep/"/>
    
    <category term="wait" scheme="https://www.sunliaodong.cn/tags/wait/"/>
    
    <category term="join" scheme="https://www.sunliaodong.cn/tags/join/"/>
    
    <category term="yield" scheme="https://www.sunliaodong.cn/tags/yield/"/>
    
    <category term="start" scheme="https://www.sunliaodong.cn/tags/start/"/>
    
    <category term="run" scheme="https://www.sunliaodong.cn/tags/run/"/>
    
    <category term="park" scheme="https://www.sunliaodong.cn/tags/park/"/>
    
    <category term="unpark" scheme="https://www.sunliaodong.cn/tags/unpark/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程之线程中断</title>
    <link href="https://www.sunliaodong.cn/2021/02/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD/"/>
    <id>https://www.sunliaodong.cn/2021/02/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD/</id>
    <published>2021-02-05T11:31:20.000Z</published>
    <updated>2021-02-05T11:55:59.325Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;正常结束-执行完成&quot;&gt;&lt;a href=&quot;#正常结束-执行完成&quot; class=&quot;headerlink&quot; title=&quot;正常结束(执行完成)&quot;&gt;&lt;/a&gt;正常结束(执行完成)&lt;/h2&gt;&lt;h2 id=&quot;使用退出标志退出线程&quot;&gt;&lt;a href=&quot;#使用退出标志退出线程&quot; class=&quot;headerlink&quot; title=&quot;使用退出标志退出线程&quot;&gt;&lt;/a&gt;使用退出标志退出线程&lt;/h2&gt;&lt;p&gt;一般 run()方法执行完，线程就会正常结束，然而，常常有些线程是&lt;strong&gt;伺服线程&lt;/strong&gt;。它们需要长时间的运行，只有在外部某些条件满足的情况下，才能关闭这些线程。使用一个变量来控制循环，例如：最直接的方法就是设一个boolean类型的标志，并通过设置这个标志为true或false 来控制while 循环是否退出，代码示例：&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    <category term="并发编程" scheme="https://www.sunliaodong.cn/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    <category term="源码分析" scheme="https://www.sunliaodong.cn/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="线程中断" scheme="https://www.sunliaodong.cn/tags/%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD/"/>
    
    <category term="Interrupt" scheme="https://www.sunliaodong.cn/tags/Interrupt/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程之线程创建</title>
    <link href="https://www.sunliaodong.cn/2021/02/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA/"/>
    <id>https://www.sunliaodong.cn/2021/02/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA/</id>
    <published>2021-02-05T11:31:12.000Z</published>
    <updated>2021-02-05T12:08:56.579Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;通过Thread构建&quot;&gt;&lt;a href=&quot;#通过Thread构建&quot; class=&quot;headerlink&quot; title=&quot;通过Thread构建&quot;&gt;&lt;/a&gt;通过Thread构建&lt;/h2&gt;&lt;p&gt;Thread 类本质上是实现了 Runnable 接口的一个实例，代表一个线程的实例。启动线程的唯一方法就是通过 Thread 类的 start()实例方法。start()方法是一个 native 方法，它将启动一个新线程。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    <category term="并发编程" scheme="https://www.sunliaodong.cn/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    <category term="源码分析" scheme="https://www.sunliaodong.cn/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="线程创建" scheme="https://www.sunliaodong.cn/tags/%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA/"/>
    
    <category term="Thread" scheme="https://www.sunliaodong.cn/tags/Thread/"/>
    
    <category term="Runnable" scheme="https://www.sunliaodong.cn/tags/Runnable/"/>
    
    <category term="Callable" scheme="https://www.sunliaodong.cn/tags/Callable/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程之线程状态</title>
    <link href="https://www.sunliaodong.cn/2021/02/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/"/>
    <id>https://www.sunliaodong.cn/2021/02/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/</id>
    <published>2021-02-05T11:31:03.000Z</published>
    <updated>2021-02-05T11:50:19.130Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;操作系统中的状态&quot;&gt;&lt;a href=&quot;#操作系统中的状态&quot; class=&quot;headerlink&quot; title=&quot;操作系统中的状态&quot;&gt;&lt;/a&gt;操作系统中的状态&lt;/h2&gt;&lt;div align=&quot;center&quot;&gt;

&lt;img src=&quot;/2021/02/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/1590649906474.png&quot; class title=&quot;操作系统中的状态&quot;&gt;

&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;【初始状态】仅是在语言层面创建了线程对象，还未与操作系统线程关联&lt;/li&gt;
&lt;li&gt;【可运行状态】（就绪状态）指该线程已经被创建（与操作系统线程关联），可以由 CPU 调度执行&lt;/li&gt;
&lt;li&gt;【运行状态】指获取了 CPU 时间片运行中的状态&lt;ul&gt;
&lt;li&gt;当 CPU 时间片用完，会从【运行状态】转换至【可运行状态】，会导致线程的上下文切换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;【阻塞状态】&lt;ul&gt;
&lt;li&gt;如果调用了阻塞 API，如 BIO 读写文件，这时该线程实际不会用到 CPU，会导致线程上下文切换，进入【阻塞状态】&lt;/li&gt;
&lt;li&gt;等 BIO 操作完毕，会由操作系统唤醒阻塞的线程，转换至【可运行状态】&lt;/li&gt;
&lt;li&gt;与【可运行状态】的区别是，对【阻塞状态】的线程来说只要它们一直不唤醒，调度器就一直不会考虑调度它们&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;【终止状态】表示线程已经执行完毕，生命周期已经结束，不会再转换为其它状态&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    <category term="并发编程" scheme="https://www.sunliaodong.cn/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="线程状态" scheme="https://www.sunliaodong.cn/tags/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程之线程的概念</title>
    <link href="https://www.sunliaodong.cn/2021/02/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%A6%82%E5%BF%B5/"/>
    <id>https://www.sunliaodong.cn/2021/02/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%A6%82%E5%BF%B5/</id>
    <published>2021-02-05T11:30:55.000Z</published>
    <updated>2021-02-05T11:47:01.993Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;h3 id=&quot;线程与进程&quot;&gt;&lt;a href=&quot;#线程与进程&quot; class=&quot;headerlink&quot; title=&quot;线程与进程&quot;&gt;&lt;/a&gt;线程与进程&lt;/h3&gt;&lt;h4 id=&quot;进程&quot;&gt;&lt;a href=&quot;#进程&quot; class=&quot;headerlink&quot; title=&quot;进程&quot;&gt;&lt;/a&gt;进程&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;用来加载指令、管理内存、管理IO、磁盘读写&lt;/li&gt;
&lt;li&gt;当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。&lt;/li&gt;
&lt;li&gt;进程就可以视为程序的一个实例比如java.exe&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;线程&quot;&gt;&lt;a href=&quot;#线程&quot; class=&quot;headerlink&quot; title=&quot;线程&quot;&gt;&lt;/a&gt;线程&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给 CPU 执行&lt;/li&gt;
&lt;li&gt;在一个进程里可以创建多个线程，一个标准的线程包括&lt;strong&gt;线程ID，当前指令指针(PC），寄存器集合和堆栈组成&lt;/strong&gt;，堆中的内容可共享。处理器在这些线程上高速切换（涉及到上下文切换），让使用者感觉到这些线程在同时执行。&lt;strong&gt;如果没有明确的协同机制&lt;/strong&gt;，线程将彼此独立执行。每一个程序都至少有一个线程，若程序只有一个线程，那就是程序本身。  &lt;/li&gt;
&lt;li&gt;线程是进程的一个实体（一个进程包含多个进程），是被系统独立调度和分配的最小单元，，也叫轻量级线程（Light Weight Process），并且线程拥有独立的资源包括：栈、线程ID、寄存器和指令指针，其他堆中的资源在内存中共享。共享资源在并发编程中需要增加同步机制防止资源数据处理不对。  &lt;/li&gt;
&lt;li&gt;一个线程可以创建和撤消另一个线程，同一进程中的多个线程之间可以并发执行。由于线程之间的相互制约，致使线程在运行中呈现出间断性。线程也有&lt;strong&gt;就绪、阻塞和运行&lt;/strong&gt;三种基本状态。就绪状态是指线程具备运行的所有条件，逻辑上可以运行，在等待处理机；运行状态是指线程占有处理机正在运行；阻塞状态是指线程在等待一个事件（如某个信号量），逻辑上不可执行。  &lt;/li&gt;
&lt;li&gt;线程是程序中一个单一的顺序控制流程。进程内一个相对独立的、可调度的执行单元，是系统独立调度和分派CPU的基本单位指运行中的程序的调度单位。在单个程序中同时运行多个线程完成不同的工作，称为多线程。&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    <category term="并发编程" scheme="https://www.sunliaodong.cn/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="线程" scheme="https://www.sunliaodong.cn/tags/%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="进程" scheme="https://www.sunliaodong.cn/tags/%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程之内存模型</title>
    <link href="https://www.sunliaodong.cn/2021/02/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>https://www.sunliaodong.cn/2021/02/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</id>
    <published>2021-02-05T11:30:40.000Z</published>
    <updated>2021-02-05T11:45:03.042Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;作用：屏蔽各种硬件和操作系统内存的访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果，定义了Java虚拟机与计算机内存是如何协同工作的，是一种主存与工作内存的抽象概念，并且底层对应CPU的寄存器、缓存、硬件内存以及CPU指令优化等&lt;/li&gt;
&lt;li&gt;简称：Java Memory Model简称JMM&lt;/li&gt;
&lt;li&gt;目的：定义程序中各个变量的访问规则，以及在必须时如何同步地访问共享变量，即在虚拟机中将变量存储到内存和从内存中取出变量这样的底层细节&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    <category term="JVM" scheme="https://www.sunliaodong.cn/categories/JVM/"/>
    
    <category term="并发编程" scheme="https://www.sunliaodong.cn/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="内存模型" scheme="https://www.sunliaodong.cn/tags/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程之面临的问题</title>
    <link href="https://www.sunliaodong.cn/2021/02/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%9D%A2%E4%B8%B4%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://www.sunliaodong.cn/2021/02/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%9D%A2%E4%B8%B4%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2021-02-05T11:30:29.000Z</published>
    <updated>2021-02-05T12:07:03.484Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;上线文切换&quot;&gt;&lt;a href=&quot;#上线文切换&quot; class=&quot;headerlink&quot; title=&quot;上线文切换&quot;&gt;&lt;/a&gt;上线文切换&lt;/h2&gt;&lt;p&gt;巧妙地利用了时间片轮转的方式, CPU 给每个任务都服务一定的时间，然后把当前任务的状态保存下来，在加载下一任务的状态后，继续服务下一任务，任务的状态保存及再加载, 这段过程就叫做&lt;strong&gt;上下文切换&lt;/strong&gt;。时间片轮转的方式使多个任务在同一颗 CPU 上执行变成了可能。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    <category term="并发编程" scheme="https://www.sunliaodong.cn/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="上线文切换" scheme="https://www.sunliaodong.cn/tags/%E4%B8%8A%E7%BA%BF%E6%96%87%E5%88%87%E6%8D%A2/"/>
    
    <category term="死锁" scheme="https://www.sunliaodong.cn/tags/%E6%AD%BB%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程之知识图谱</title>
    <link href="https://www.sunliaodong.cn/2021/02/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    <id>https://www.sunliaodong.cn/2021/02/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</id>
    <published>2021-02-05T11:30:18.000Z</published>
    <updated>2021-02-05T11:33:51.714Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;div align=&quot;center&quot;&gt;

&lt;img</summary>
        
      
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    <category term="并发编程" scheme="https://www.sunliaodong.cn/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper系统化学习</title>
    <link href="https://www.sunliaodong.cn/2021/02/05/Zookeeper%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.sunliaodong.cn/2021/02/05/Zookeeper%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-02-05T11:16:32.000Z</published>
    <updated>2021-02-05T11:25:33.115Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;开源分布式协调框架&lt;/li&gt;
&lt;li&gt;为分布式应用提供一致性服务，作为整个大数据体系的管理员，包括服务发现、分布式锁、分布式领导选举、配置管理等&lt;/li&gt;
&lt;li&gt;Zookeeper = 文件系统（类似于Linux文件系统的树形结构） + 监听通知机制&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="Zookeeper" scheme="https://www.sunliaodong.cn/categories/Zookeeper/"/>
    
    
    <category term="Zookeeper" scheme="https://www.sunliaodong.cn/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis系统化学习之缓存</title>
    <link href="https://www.sunliaodong.cn/2021/02/05/MyBatis%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%BC%93%E5%AD%98/"/>
    <id>https://www.sunliaodong.cn/2021/02/05/MyBatis%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%BC%93%E5%AD%98/</id>
    <published>2021-02-05T11:11:17.000Z</published>
    <updated>2021-02-05T11:15:13.026Z</updated>
    
    
    <summary type="html">&lt;p&gt;Mybatis中有一级缓存和二级缓存，默认情况下一级缓存是开启的，而且是不能关闭的。一级缓存是指 SqlSession 级别的缓存，当在同一个 SqlSession 中进行相同的 SQL 语句查询时，第二次以后的查询不会从数据库查询，而是直接从缓存中获取，一级缓存最多缓存 1024 条 SQL。二级缓存是指可以跨 SqlSession 的缓存。是 mapper 级别的缓存，对于 mapper 级别的缓存不同的 sqlsession 是可以共享的。&lt;/p&gt;</summary>
    
    
    
    <category term="开源框架" scheme="https://www.sunliaodong.cn/categories/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="https://www.sunliaodong.cn/categories/MyBatis/"/>
    
    
    <category term="缓存" scheme="https://www.sunliaodong.cn/tags/%E7%BC%93%E5%AD%98/"/>
    
    <category term="MyBatis" scheme="https://www.sunliaodong.cn/tags/MyBatis/"/>
    
    <category term="ORM" scheme="https://www.sunliaodong.cn/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>Linux 性能分析思路与工具</title>
    <link href="https://www.sunliaodong.cn/2021/02/05/Linux-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E6%80%9D%E8%B7%AF%E4%B8%8E%E5%B7%A5%E5%85%B7/"/>
    <id>https://www.sunliaodong.cn/2021/02/05/Linux-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E6%80%9D%E8%B7%AF%E4%B8%8E%E5%B7%A5%E5%85%B7/</id>
    <published>2021-02-05T08:33:53.000Z</published>
    <updated>2021-02-05T08:46:42.389Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;关注点&quot;&gt;&lt;a href=&quot;#关注点&quot; class=&quot;headerlink&quot; title=&quot;关注点&quot;&gt;&lt;/a&gt;关注点&lt;/h2&gt;&lt;div align=&quot;center&quot;&gt;

&lt;img src=&quot;/2021/02/05/Linux-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E6%80%9D%E8%B7%AF%E4%B8%8E%E5%B7%A5%E5%85%B7/1611133930457.png&quot; class&gt;

&lt;/div&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.sunliaodong.cn/categories/Linux/"/>
    
    <category term="性能分析" scheme="https://www.sunliaodong.cn/categories/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Linux" scheme="https://www.sunliaodong.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux cpu过高分析</title>
    <link href="https://www.sunliaodong.cn/2021/02/05/Linux-cpu%E8%BF%87%E9%AB%98%E5%88%86%E6%9E%90/"/>
    <id>https://www.sunliaodong.cn/2021/02/05/Linux-cpu%E8%BF%87%E9%AB%98%E5%88%86%E6%9E%90/</id>
    <published>2021-02-05T08:23:17.000Z</published>
    <updated>2021-02-05T08:30:52.906Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;CPU使用率过高&quot;&gt;&lt;a href=&quot;#CPU使用率过高&quot; class=&quot;headerlink&quot; title=&quot;CPU使用率过高&quot;&gt;&lt;/a&gt;CPU使用率过高&lt;/h2&gt;&lt;p&gt;在高负载情况下CPU持续使用率高一般没有问题，但是导致任务无法正常调度或者load持续增加就需要重点关注，并且定位具体原因。（&lt;strong&gt;一般计算密集型应用 CPU 使用率偏高 load 偏低，IO 密集型相反。&lt;/strong&gt;）&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.sunliaodong.cn/categories/Linux/"/>
    
    <category term="性能分析" scheme="https://www.sunliaodong.cn/categories/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Linux" scheme="https://www.sunliaodong.cn/tags/Linux/"/>
    
    <category term="CPU过高" scheme="https://www.sunliaodong.cn/tags/CPU%E8%BF%87%E9%AB%98/"/>
    
  </entry>
  
  <entry>
    <title>Linux timewait问题分析</title>
    <link href="https://www.sunliaodong.cn/2021/02/05/Linux-timewait%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
    <id>https://www.sunliaodong.cn/2021/02/05/Linux-timewait%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/</id>
    <published>2021-02-05T08:23:00.000Z</published>
    <updated>2021-02-05T08:28:34.869Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;TCP协议说明&quot;&gt;&lt;a href=&quot;#TCP协议说明&quot; class=&quot;headerlink&quot; title=&quot;TCP协议说明&quot;&gt;&lt;/a&gt;TCP协议说明&lt;/h2&gt;&lt;p&gt;TCP协议规定，对于已经建立的连接，网络双方要进行四次握手才能成功断开连接，如果缺少了其中某个步骤，将会使连接处于假死状态，连接本身占用的资源不会被释放。网络服务器程序要同时管理大量连接，所以很有必要保证无用连接完全断开，否则大量僵死的连接会浪费许多服务器资源。在众多TCP状态中，最值得注意的状态有两个：&lt;strong&gt;CLOSE_WAIT和TIME_WAIT。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.sunliaodong.cn/categories/Linux/"/>
    
    <category term="性能分析" scheme="https://www.sunliaodong.cn/categories/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Linux" scheme="https://www.sunliaodong.cn/tags/Linux/"/>
    
    <category term="timewait" scheme="https://www.sunliaodong.cn/tags/timewait/"/>
    
    <category term="网络" scheme="https://www.sunliaodong.cn/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Linux /proc/vmstat详解</title>
    <link href="https://www.sunliaodong.cn/2021/02/05/Linux-proc-vmstat%E8%AF%A6%E8%A7%A3/"/>
    <id>https://www.sunliaodong.cn/2021/02/05/Linux-proc-vmstat%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-02-05T07:50:20.000Z</published>
    <updated>2021-02-05T08:02:37.987Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;内核中虚拟内存的统计信息，对于性能分析有很大益处&lt;/p&gt;
&lt;figure class=&quot;highlight</summary>
        
      
    
    
    
    <category term="Linux" scheme="https://www.sunliaodong.cn/categories/Linux/"/>
    
    <category term="性能分析" scheme="https://www.sunliaodong.cn/categories/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Linux" scheme="https://www.sunliaodong.cn/tags/Linux/"/>
    
    <category term="proc" scheme="https://www.sunliaodong.cn/tags/proc/"/>
    
    <category term="vmstat" scheme="https://www.sunliaodong.cn/tags/vmstat/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令之netstat/ss</title>
    <link href="https://www.sunliaodong.cn/2021/02/05/Linux%E5%91%BD%E4%BB%A4%E4%B9%8Bnetstat-ss/"/>
    <id>https://www.sunliaodong.cn/2021/02/05/Linux%E5%91%BD%E4%BB%A4%E4%B9%8Bnetstat-ss/</id>
    <published>2021-02-05T07:47:58.000Z</published>
    <updated>2021-02-05T07:48:57.913Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h2&gt;&lt;p&gt;netstat命令用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。netstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。&lt;br&gt;在Linux下，如果连接数比较大，可以使用效率更高的ss来替代netstat。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;usage: netstat [-vWeenNcCF] [&amp;lt;Af&amp;gt;] -r         netstat &amp;#123;-V|--version|-h|--&lt;span class=&quot;built_in&quot;&gt;help&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       netstat [-vWnNcaeol] [&amp;lt;Socket&amp;gt; ...]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       netstat &amp;#123; [-vWeenNac] -I[&amp;lt;Iface&amp;gt;] | [-veenNac] -i | [-cnNe] -M | -s [-6tuw] &amp;#125; [delay]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        -r, --route              display routing table&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        -I, --interfaces=&amp;lt;Iface&amp;gt; display interface table &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;lt;Iface&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        -i, --interfaces         display interface table&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        -g, --groups             display multicast group memberships&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        -s, --statistics         display networking statistics (like SNMP)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        -M, --masquerade         display masqueraded connections&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        -v, --verbose            be verbose&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        -W, --wide               don&lt;span class=&quot;string&quot;&gt;&amp;#x27;t truncate IP addresses&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        -n, --numeric            don&amp;#x27;&lt;/span&gt;t resolve names&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        --numeric-hosts          don&lt;span class=&quot;string&quot;&gt;&amp;#x27;t resolve host names&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        --numeric-ports          don&amp;#x27;&lt;/span&gt;t resolve port names&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        --numeric-users          don&lt;span class=&quot;string&quot;&gt;&amp;#x27;t resolve user names&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        -N, --symbolic           resolve hardware names&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        -e, --extend             display other/more information&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        -p, --programs           display PID/Program name for sockets&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        -o, --timers             display timers&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        -c, --continuous         continuous listing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        -l, --listening          display listening server sockets&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        -a, --all                display all sockets (default: connected)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        -F, --fib                display Forwarding Information Base (default)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        -C, --cache              display routing cache instead of FIB&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        -Z, --context            display SELinux security context for sockets&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  &amp;lt;Socket&amp;gt;=&amp;#123;-t|--tcp&amp;#125; &amp;#123;-u|--udp&amp;#125; &amp;#123;-U|--udplite&amp;#125; &amp;#123;-S|--sctp&amp;#125; &amp;#123;-w|--raw&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;           &amp;#123;-x|--unix&amp;#125; --ax25 --ipx --netrom&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  &amp;lt;AF&amp;gt;=Use &amp;#x27;&lt;/span&gt;-6|-4&lt;span class=&quot;string&quot;&gt;&amp;#x27; or &amp;#x27;&lt;/span&gt;-A &amp;lt;af&amp;gt;&lt;span class=&quot;string&quot;&gt;&amp;#x27; or &amp;#x27;&lt;/span&gt;--&amp;lt;af&amp;gt;&lt;span class=&quot;string&quot;&gt;&amp;#x27;; default: inet&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  List of possible address families (which support routing):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    inet (DARPA Internet) inet6 (IPv6) ax25 (AMPR AX.25) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    netrom (AMPR NET/ROM) ipx (Novell IPX) ddp (Appletalk DDP) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    x25 (CCITT X.25) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.sunliaodong.cn/categories/Linux/"/>
    
    <category term="性能分析" scheme="https://www.sunliaodong.cn/categories/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Linux" scheme="https://www.sunliaodong.cn/tags/Linux/"/>
    
    <category term="netstat" scheme="https://www.sunliaodong.cn/tags/netstat/"/>
    
    <category term="ss" scheme="https://www.sunliaodong.cn/tags/ss/"/>
    
    <category term="网络分析" scheme="https://www.sunliaodong.cn/tags/%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令之iostat</title>
    <link href="https://www.sunliaodong.cn/2021/02/05/Linux%E5%91%BD%E4%BB%A4%E4%B9%8Biostat/"/>
    <id>https://www.sunliaodong.cn/2021/02/05/Linux%E5%91%BD%E4%BB%A4%E4%B9%8Biostat/</id>
    <published>2021-02-05T07:46:24.000Z</published>
    <updated>2021-02-05T07:47:25.249Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;iostat 主要用于输出磁盘IO 和 CPU的统计信息。&lt;br&gt;iostat属于sysstat软件包。可以用yum install sysstat 直接安装。&lt;/p&gt;
&lt;h2 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法&quot;&gt;&lt;/a&gt;用法&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Usage: iostat [ options ] [ &amp;lt;interval&amp;gt; [ &amp;lt;count&amp;gt; ] ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Options are:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ -c ] [ -d ] [ -h ] [ -k | -m ] [ -N ] [ -t ] [ -V ] [ -x ] [ -y ] [ -z ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ -j &amp;#123; ID | LABEL | PATH | UUID | ... &amp;#125; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ [ -T ] -g &amp;lt;group_name&amp;gt; ] [ -p [ &amp;lt;device&amp;gt; [,...] | ALL ] ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ &amp;lt;device&amp;gt; [...] | ALL ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参数说明&quot;&gt;&lt;a href=&quot;#参数说明&quot; class=&quot;headerlink&quot; title=&quot;参数说明&quot;&gt;&lt;/a&gt;参数说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;-c： 显示CPU使用情况&lt;/li&gt;
&lt;li&gt;-d： 显示磁盘使用情况&lt;/li&gt;
&lt;li&gt;-N： 显示磁盘阵列(LVM) 信息&lt;/li&gt;
&lt;li&gt;-n： 显示NFS 使用情况&lt;/li&gt;
&lt;li&gt;-k： 以 KB 为单位显示&lt;/li&gt;
&lt;li&gt;-m： 以 M 为单位显示&lt;/li&gt;
&lt;li&gt;-t： 报告每秒向终端读取和写入的字符数和CPU的信息&lt;/li&gt;
&lt;li&gt;-V： 显示版本信息&lt;/li&gt;
&lt;li&gt;-x： 显示详细信息&lt;/li&gt;
&lt;li&gt;-p：[磁盘] 显示磁盘和分区的情况&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.sunliaodong.cn/categories/Linux/"/>
    
    <category term="性能分析" scheme="https://www.sunliaodong.cn/categories/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Linux" scheme="https://www.sunliaodong.cn/tags/Linux/"/>
    
    <category term="iostat" scheme="https://www.sunliaodong.cn/tags/iostat/"/>
    
    <category term="磁盘分析" scheme="https://www.sunliaodong.cn/tags/%E7%A3%81%E7%9B%98%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令之TOP</title>
    <link href="https://www.sunliaodong.cn/2021/02/05/Linux%E5%91%BD%E4%BB%A4%E4%B9%8BTOP/"/>
    <id>https://www.sunliaodong.cn/2021/02/05/Linux%E5%91%BD%E4%BB%A4%E4%B9%8BTOP/</id>
    <published>2021-02-05T07:43:40.000Z</published>
    <updated>2021-02-05T07:45:35.404Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@incloudos logs]&lt;span class=&quot;comment&quot;&gt;# top -h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  procps-ng version 3.3.10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Usage:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  top -hv | -bcHiOSs -d secs -n max -u|U user -p pid(s) -o field -w [cols]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s – 改变画面更新频率&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;l – 关闭或开启第一部分第一行 top 信息的表示&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t – 关闭或开启第一部分第二行 Tasks 和第三行 Cpus 信息的表示&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m – 关闭或开启第一部分第四行 Mem 和 第五行 Swap 信息的表示&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;N – 以 PID 的大小的顺序排列表示进程列表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;P – 以 CPU 占用率大小的顺序排列进程列表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M – 以内存占用率大小的顺序排列进程列表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h – 显示帮助&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n – 设置在进程列表所显示进程的数量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;q – 退出 top&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s – 改变画面更新周期&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;请在top里面按下E，注意是大写。你会发现内存那一行的最左侧，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;也就是Mem前面，会有Kib、MiB、GiB等单位变化，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;但是数字后面不会直接写明单位。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.sunliaodong.cn/categories/Linux/"/>
    
    <category term="性能分析" scheme="https://www.sunliaodong.cn/categories/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Linux" scheme="https://www.sunliaodong.cn/tags/Linux/"/>
    
    <category term="TOP" scheme="https://www.sunliaodong.cn/tags/TOP/"/>
    
  </entry>
  
</feed>
