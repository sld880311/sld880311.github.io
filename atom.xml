<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一蓑烟雨任平生</title>
  
  <subtitle>个人成长日记</subtitle>
  <link href="https://www.sunliaodong.cn/atom.xml" rel="self"/>
  
  <link href="https://www.sunliaodong.cn/"/>
  <updated>2021-02-04T12:50:08.531Z</updated>
  <id>https://www.sunliaodong.cn/</id>
  
  <author>
    <name>Theodore Sun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL之show status详解</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/MySQL%E4%B9%8Bshow-status%E8%AF%A6%E8%A7%A3/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/MySQL%E4%B9%8Bshow-status%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-02-04T12:49:05.000Z</published>
    <updated>2021-02-04T12:50:08.531Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;style type=&quot;text/css&quot;&gt;
.tg  {border-collapse:collapse;border-color:#bbb;border-spacing:0;}
.tg</summary>
        
      
    
    
    
    <category term="数据库" scheme="https://www.sunliaodong.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MySQL" scheme="https://www.sunliaodong.cn/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://www.sunliaodong.cn/tags/MySQL/"/>
    
    <category term="show status" scheme="https://www.sunliaodong.cn/tags/show-status/"/>
    
  </entry>
  
  <entry>
    <title>MySQL之高可用</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/MySQL%E4%B9%8B%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/MySQL%E4%B9%8B%E9%AB%98%E5%8F%AF%E7%94%A8/</id>
    <published>2021-02-04T12:45:21.000Z</published>
    <updated>2021-02-04T12:47:59.487Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;互为主从复制&quot;&gt;&lt;a href=&quot;#互为主从复制&quot; class=&quot;headerlink&quot; title=&quot;互为主从复制&quot;&gt;&lt;/a&gt;互为主从复制&lt;/h2&gt;&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;在一些高可用的环境中，mysql的主从不能满足现实中的一些实际需求。比如，一些流量大的网站数据库访问有了瓶颈，需要负载均衡的时候就用两个或者多个的mysql服务器，而这些mysql服务器的数据库数据必须要保持一致，那么就会用到主主复制。  &lt;/p&gt;
&lt;p&gt;mysql主从架构中其实就一个主在工作，而从就相当于一个备份机器，从通过日志监测的方式来备份主库上的数据而保证主库的数据安全。在这种架构中如果从上的数据做了改变，主数据是不会用任何变化的。因为mysql主从架构主要是mysql从监控mysql主的日志变化来实现同步，相反的在这个架构中主并没有监控从的日志变化。所以，mysql从数据反生变化，主也就没有什么变化了。  &lt;/p&gt;
&lt;p&gt;通过上述描述，可以看到如果想实现主主复制，无非就是在mysql主从架构上让mysql主实现监测从的日志变化，从而实现两台机器相互同步。  &lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://www.sunliaodong.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MySQL" scheme="https://www.sunliaodong.cn/categories/MySQL/"/>
    
    <category term="高可用" scheme="https://www.sunliaodong.cn/categories/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
    
    <category term="MySQL" scheme="https://www.sunliaodong.cn/tags/MySQL/"/>
    
    <category term="高可用" scheme="https://www.sunliaodong.cn/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>MySQL之备份与恢复</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/MySQL%E4%B9%8B%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/MySQL%E4%B9%8B%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</id>
    <published>2021-02-04T12:43:21.000Z</published>
    <updated>2021-02-04T12:44:26.403Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;h3 id=&quot;备份的目的&quot;&gt;&lt;a href=&quot;#备份的目的&quot; class=&quot;headerlink&quot; title=&quot;备份的目的&quot;&gt;&lt;/a&gt;备份的目的&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;做灾难恢复：对损坏的数据进行恢复和还原&lt;/li&gt;
&lt;li&gt;需求改变：因需求改变而需要把数据还原到改变以前&lt;/li&gt;
&lt;li&gt;测试：测试新功能是否可用&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;备份需要考虑的问题&quot;&gt;&lt;a href=&quot;#备份需要考虑的问题&quot; class=&quot;headerlink&quot; title=&quot;备份需要考虑的问题&quot;&gt;&lt;/a&gt;备份需要考虑的问题&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;可以容忍丢失多长时间的数据；&lt;/li&gt;
&lt;li&gt;恢复数据要在多长时间内完；&lt;/li&gt;
&lt;li&gt;恢复的时候是否需要持续提供服务；&lt;/li&gt;
&lt;li&gt;恢复的对象，是整个库，多个表，还是单个库，单个表。&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://www.sunliaodong.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MySQL" scheme="https://www.sunliaodong.cn/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://www.sunliaodong.cn/tags/MySQL/"/>
    
    <category term="备份" scheme="https://www.sunliaodong.cn/tags/%E5%A4%87%E4%BB%BD/"/>
    
    <category term="恢复" scheme="https://www.sunliaodong.cn/tags/%E6%81%A2%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>MySQL之优化技巧</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/MySQL%E4%B9%8B%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/MySQL%E4%B9%8B%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/</id>
    <published>2021-02-04T12:41:07.000Z</published>
    <updated>2021-02-04T12:42:42.648Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;优化技巧&quot;&gt;&lt;a href=&quot;#优化技巧&quot; class=&quot;headerlink&quot; title=&quot;优化技巧&quot;&gt;&lt;/a&gt;优化技巧&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;配置文件的快速查找&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/usr/libexec/mysqld --verbose --&lt;span class=&quot;built_in&quot;&gt;help&lt;/span&gt;|grep -A 1 &lt;span class=&quot;string&quot;&gt;&amp;#x27;Default options&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;200815 16:01:04 [Note] Plugin &lt;span class=&quot;string&quot;&gt;&amp;#x27;FEEDBACK&amp;#x27;&lt;/span&gt; is disabled.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Default options are &lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; from the following files &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; the given order:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/etc/mysql/my.cnf /etc/my.cnf ~/.my.cnf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;配置项使用小写，单词之间使用横线或下划线分隔，并且使用统一的规范&lt;/li&gt;
&lt;li&gt;作用域：全局、会话、对象&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://www.sunliaodong.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MySQL" scheme="https://www.sunliaodong.cn/categories/MySQL/"/>
    
    <category term="调优" scheme="https://www.sunliaodong.cn/categories/%E8%B0%83%E4%BC%98/"/>
    
    
    <category term="MySQL" scheme="https://www.sunliaodong.cn/tags/MySQL/"/>
    
    <category term="调优" scheme="https://www.sunliaodong.cn/tags/%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
  <entry>
    <title>MySQL之配置文件</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/MySQL%E4%B9%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/MySQL%E4%B9%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2021-02-04T12:39:18.000Z</published>
    <updated>2021-02-04T12:40:27.873Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;下面是72GB内存生产环境中my.cnf配置文件，读者可以作为一个优化参考：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</summary>
        
      
    
    
    
    <category term="数据库" scheme="https://www.sunliaodong.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MySQL" scheme="https://www.sunliaodong.cn/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://www.sunliaodong.cn/tags/MySQL/"/>
    
    <category term="配置文件" scheme="https://www.sunliaodong.cn/tags/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>MySQL之账户管理</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/MySQL%E4%B9%8B%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/MySQL%E4%B9%8B%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/</id>
    <published>2021-02-04T12:35:57.000Z</published>
    <updated>2021-02-04T12:37:52.344Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;Mysql账户体系&quot;&gt;&lt;a href=&quot;#Mysql账户体系&quot; class=&quot;headerlink&quot; title=&quot;Mysql账户体系&quot;&gt;&lt;/a&gt;Mysql账户体系&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; use mysql;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;show&lt;/span&gt; tables;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;---------------------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt; Tables_in_mysql           &lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;---------------------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt; columns_priv              &lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt; db                        &lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt; procs_priv                &lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt; proxies_priv              &lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt; tables_priv               &lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt;                      &lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;---------------------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;0.00&lt;/span&gt; sec)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://www.sunliaodong.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MySQL" scheme="https://www.sunliaodong.cn/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://www.sunliaodong.cn/tags/MySQL/"/>
    
    <category term="账户管理" scheme="https://www.sunliaodong.cn/tags/%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Java系统化学习之集合概述</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9B%86%E5%90%88%E6%A6%82%E8%BF%B0/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9B%86%E5%90%88%E6%A6%82%E8%BF%B0/</id>
    <published>2021-02-04T12:19:31.000Z</published>
    <updated>2021-02-04T12:31:34.035Z</updated>
    
    
    <summary type="html">&lt;p&gt;使用集合需要考虑几个关注点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;线程安全性&lt;/li&gt;
&lt;li&gt;是否有序&lt;/li&gt;
&lt;li&gt;是否重复&lt;/li&gt;
&lt;li&gt;关注查询还是关注写入&lt;/li&gt;
&lt;li&gt;equals和hashCode方法的重写需要同步&lt;/li&gt;
&lt;li&gt;使用接口返回集合数据&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="集合" scheme="https://www.sunliaodong.cn/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Java系统化学习之HashMap</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BHashMap/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BHashMap/</id>
    <published>2021-02-04T12:08:50.000Z</published>
    <updated>2021-02-04T12:17:19.164Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;HashMap是一种使用&lt;strong&gt;数组+链表+红黑树&lt;/strong&gt;数据结构实现的Map&lt;/li&gt;
&lt;li&gt;HashMap 根据键的 hashCode 值存储数据，大多数情况下可以直接定位到它的值，因而具有很快的访问速度，但遍历顺序不确定。&lt;/li&gt;
&lt;li&gt;HashMap只允许一个key为null，允许多个value为null&lt;/li&gt;
&lt;li&gt;HashMap 非线程安全，可以用 Collections 的 synchronizedMap 方法使 HashMap 具有线程安全的能力，或者使用 ConcurrentHashMap。&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    <category term="源码分析" scheme="https://www.sunliaodong.cn/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="集合" scheme="https://www.sunliaodong.cn/tags/%E9%9B%86%E5%90%88/"/>
    
    <category term="HashMap" scheme="https://www.sunliaodong.cn/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>Java系统化学习之Type</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BType/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BType/</id>
    <published>2021-02-04T11:06:39.000Z</published>
    <updated>2021-02-04T11:08:12.975Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;这里的Type指java.lang.reflect.Type, 是Java中所有类型的公共高级接口, 代表了Java中的所有类型. Type体系中类型的包括：数组类型(GenericArrayType)、参数化类型(ParameterizedType)、类型变量(TypeVariable)、通配符类型(WildcardType)、原始类型(Class)、基本类型(Class), 以上这些类型都实现Type接口.  &lt;/p&gt;
&lt;p&gt;Type 表示的全部类型而每个Class对象表示一个具体类型的实例，如String.class仅代表String类型。由此看来Type与 Class 表示类型几乎是相同的（Class实现接口Type），只不过 Type表示的范围比Class要广得多而已。当然Type还有其他子类。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参数化类型（ParameterizedType）：有原始类型和具体的类型参数，泛型List&lt;String&gt;、Map；&lt;/String&gt;&lt;/li&gt;
&lt;li&gt;数组类型（GenericArrayType）：不是数组String[] 、byte[]，而是带有泛型的数组，即T[] ；&lt;/li&gt;
&lt;li&gt;通配符类型（WildcardType）： 指的是&amp;lt;?&amp;gt;, &amp;lt;? extends T&amp;gt;等等&lt;/li&gt;
&lt;li&gt;原始类型（Class）： 不仅仅包含我们平常所指的类，还包括枚举、数组、注解等；&lt;/li&gt;
&lt;li&gt;基本类型（Class）, 也就是我们所说的java的基本类型，即int,float,double等&lt;/li&gt;
&lt;li&gt;类型变量(TypeVariable)：表示类型参数，可以有上界，比如：T extends Number&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    <category term="源码分析" scheme="https://www.sunliaodong.cn/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="Type" scheme="https://www.sunliaodong.cn/tags/Type/"/>
    
    <category term="反射" scheme="https://www.sunliaodong.cn/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Java系统化学习之String</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BString/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BString/</id>
    <published>2021-02-04T11:00:22.000Z</published>
    <updated>2021-02-04T11:05:47.575Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;String介绍&quot;&gt;&lt;a href=&quot;#String介绍&quot; class=&quot;headerlink&quot; title=&quot;String介绍&quot;&gt;&lt;/a&gt;String介绍&lt;/h2&gt;&lt;h3 id=&quot;API描述&quot;&gt;&lt;a href=&quot;#API描述&quot; class=&quot;headerlink&quot; title=&quot;API描述&quot;&gt;&lt;/a&gt;API描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在&lt;code&gt;java.lang.String&lt;/code&gt;的源码中明确说明，&lt;code&gt;String&lt;/code&gt;类表示字符串，Java中所有的字符串传字面值（如：”abc”）都是该类的实例；并且字符串是常量，一旦创建之后则不可以改变，String buffers支持可变的字符串。因为&lt;code&gt;String&lt;/code&gt;对象是不可变的，但是可以共享。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; * The &amp;#123;&lt;span class=&quot;meta&quot;&gt;@code&lt;/span&gt; String&amp;#125; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;represents&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;strings&lt;/span&gt;. &lt;span class=&quot;title&quot;&gt;All&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt; * &lt;span class=&quot;title&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;literals&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Java&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;programs&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;such&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;as&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;span class=&quot;meta&quot;&gt;@code&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&amp;#125;, are&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * implemented as instances of &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; class.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;lt;p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Strings are constant; their values cannot be changed after they&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * are created. String buffers support mutable strings.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Because String objects are immutable they can be shared.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;java&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;io&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Serializable&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;    &lt;span class=&quot;title&quot;&gt;Comparable&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;&amp;gt;, &lt;span class=&quot;title&quot;&gt;CharSequence&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过API定义总结以下信息：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用final修饰，则不能被继承（该类中的成员方法默认都是final）&lt;/li&gt;
&lt;li&gt;实现接口&lt;code&gt;Serializable&lt;/code&gt;，说明可以进行序列化&lt;/li&gt;
&lt;li&gt;实现接口&lt;code&gt;Comparable&lt;/code&gt;,说明可以大小比较&lt;/li&gt;
&lt;li&gt;实现接口&lt;code&gt;CharSequence&lt;/code&gt;,说明String本身就是char类型的数组，而且通过成员变量定义可以进行佐证&lt;/li&gt;
&lt;li&gt;通过char字符数组实现&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    <category term="源码分析" scheme="https://www.sunliaodong.cn/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="String" scheme="https://www.sunliaodong.cn/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Java系统化学习之传递方式</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BC%A0%E9%80%92%E6%96%B9%E5%BC%8F/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BC%A0%E9%80%92%E6%96%B9%E5%BC%8F/</id>
    <published>2021-02-04T10:56:04.000Z</published>
    <updated>2021-02-04T10:57:55.674Z</updated>
    
    
    <summary type="html">&lt;p&gt;在Java中的方法调用使用的都是&lt;strong&gt;值传递&lt;/strong&gt;，Java 中的所有自变量或参数传递都是通过传递句柄进行的。也就是说，当我们传递“一个对象”时，&lt;strong&gt;实际传递的只是指向位于方法外部的那个对象的“一个句柄”&lt;/strong&gt;。所以一旦要对那个句柄进行任何修改，便相当于修改外部对象。此外：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;■参数传递过程中会自动产生别名问题&lt;/li&gt;
&lt;li&gt;■不存在本地对象，只有本地句柄&lt;/li&gt;
&lt;li&gt;■句柄有自己的作用域，而对象没有&lt;/li&gt;
&lt;li&gt;■对象的“存在时间”在 Java 里不是个问题&lt;/li&gt;
&lt;li&gt;■没有语言上的支持（如常量）可防止对象被修改（以避免别名的副作用）&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="传递方式" scheme="https://www.sunliaodong.cn/tags/%E4%BC%A0%E9%80%92%E6%96%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java系统化学习之克隆</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%85%8B%E9%9A%86/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%85%8B%E9%9A%86/</id>
    <published>2021-02-04T10:49:16.000Z</published>
    <updated>2021-02-04T10:50:17.212Z</updated>
    
    
    <summary type="html">&lt;p&gt;所谓克隆就是对原有对象复用的复用，&lt;strong&gt;Java语言中克隆针对的是类的实例（对象）&lt;/strong&gt;，在Java中一共有三种方式实现。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接赋值&lt;/li&gt;
&lt;li&gt;浅拷贝&lt;/li&gt;
&lt;li&gt;深拷贝&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="clone" scheme="https://www.sunliaodong.cn/tags/clone/"/>
    
    <category term="克隆" scheme="https://www.sunliaodong.cn/tags/%E5%85%8B%E9%9A%86/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate系统化学习之常用方法</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Hibernate%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Hibernate%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2021-02-04T10:40:28.000Z</published>
    <updated>2021-02-04T10:42:34.548Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;session-find-load&quot;&gt;&lt;a href=&quot;#session-find-load&quot; class=&quot;headerlink&quot; title=&quot;session.find/load&quot;&gt;&lt;/a&gt;session.find/load&lt;/h2&gt;&lt;p&gt;hibernate中session.find/load方法都能通过指定实体类名和id从数据库中读取指定的记录，并且返回与之对映的实体对象。但是它们也有很大的区别 ,find()和load()方法在执行检索时的区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;find()在类检索级别时总是执行立即检索而且如果检索不到相关的对象的话会返回null,load()方法则会抛出一个ObjectNotException&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;load()方法可返回一个实体代理类类型，而find()方法直接返回的是实体类对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;load()方法可以充分利用内部缓存和二级缓存，而find()方法会忽略二级缓存，若内部缓存没有查询到会到数据库中去查询。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    <category term="Hibernate" scheme="https://www.sunliaodong.cn/categories/Hibernate/"/>
    
    <category term="开源框架" scheme="https://www.sunliaodong.cn/categories/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="常用方法" scheme="https://www.sunliaodong.cn/tags/%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    
    <category term="Hibernate" scheme="https://www.sunliaodong.cn/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate系统化学习之缓存</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Hibernate%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%BC%93%E5%AD%98/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Hibernate%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%BC%93%E5%AD%98/</id>
    <published>2021-02-04T10:40:16.000Z</published>
    <updated>2021-02-04T10:43:11.756Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;N-1问题&quot;&gt;&lt;a href=&quot;#N-1问题&quot; class=&quot;headerlink&quot; title=&quot;N+1问题&quot;&gt;&lt;/a&gt;N+1问题&lt;/h2&gt;&lt;p&gt;所谓N+1问题，使用hibernate查询数据，首先返回数据的id信息，并没有返回所有的对象信息，只有在真正使用的时候，在使用这个id对数据库中查询数据，一次查询多次调用数据库（缓存）的情况，就是所谓的N+1问题。以下方法或者策略会出现N+1问题：&lt;/p&gt;
&lt;h3 id=&quot;使用iterate（）方法&quot;&gt;&lt;a href=&quot;#使用iterate（）方法&quot; class=&quot;headerlink&quot; title=&quot;使用iterate（）方法&quot;&gt;&lt;/a&gt;使用iterate（）方法&lt;/h3&gt;&lt;p&gt;存在iterator的原因是，有可能会在一个session中查询两次数据，如果使用list每一次都会把所有的对象查询上来，如果使用iterator仅仅只会查询id，此时所有的对象已经存储在一级缓存(session的缓存)中，可以直接获取&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Return the query results as an &amp;lt;tt&amp;gt;Iterator&amp;lt;/tt&amp;gt;. If the query&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* contains multiple results per row, the results are returned in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* an instance of &amp;lt;tt&amp;gt;Object[]&amp;lt;/tt&amp;gt;.&amp;lt;br&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;lt;br&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Entities returned as results are initialized on demand. The first&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* SQL query returns identifiers only.&amp;lt;br&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; the result iterator&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Iterator&amp;lt;R&amp;gt; &lt;span class=&quot;title&quot;&gt;iterate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    <category term="Hibernate" scheme="https://www.sunliaodong.cn/categories/Hibernate/"/>
    
    <category term="开源框架" scheme="https://www.sunliaodong.cn/categories/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="Hibernate" scheme="https://www.sunliaodong.cn/tags/Hibernate/"/>
    
    <category term="缓存" scheme="https://www.sunliaodong.cn/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate系统化学习之对象状态</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Hibernate%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%AF%B9%E8%B1%A1%E7%8A%B6%E6%80%81/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Hibernate%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%AF%B9%E8%B1%A1%E7%8A%B6%E6%80%81/</id>
    <published>2021-02-04T10:37:05.000Z</published>
    <updated>2021-02-04T10:39:42.025Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;style type=&quot;text/css&quot;&gt;
.tg  {border-collapse:collapse;border-color:#C44D58;border-spacing:0;}
.tg td{background-color:#F9CDAD;border-color:#C44D58;border-style:solid;border-width:1px;color:#002b36;
  font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg th{background-color:#FE4365;border-color:#C44D58;border-style:solid;border-width:1px;color:#fdf6e3;
  font-family:Arial, sans-serif;font-size:14px;font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-0lax{text-align:left;vertical-align:top}
&lt;/style&gt;
&lt;table class=&quot;tg&quot;&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-0lax&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;状态&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/th&gt;
    &lt;th class=&quot;tg-0lax&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;说明&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0lax&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;临时状态（Transient）&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
    &lt;td class=&quot;tg-0lax&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;刚创建的对象（new）还没有被Session持久化、缓存中不存在这个对象的数据并且数据库中没有这个对象对应的数据为瞬时状态这个时候是没有OID。&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0lax&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;持久状态（Persistent）&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
    &lt;td class=&quot;tg-0lax&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;对象经过Session持久化操作，缓存中存在这个对象的数据为持久状态并且数据库中存在这个对象对应的数据为持久状态这个时候有OID。&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0lax&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;游离状态（Detached）&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
    &lt;td class=&quot;tg-0lax&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;已经被持久化，但不处于session的缓存中。&amp;nbsp;&amp;nbsp;&amp;nbsp;当Session关闭，缓存中不存在这个对象数据而数据库中有这个对象的数据并且有OID为游离状态。&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    <category term="Hibernate" scheme="https://www.sunliaodong.cn/categories/Hibernate/"/>
    
    <category term="开源框架" scheme="https://www.sunliaodong.cn/categories/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="Hibernate" scheme="https://www.sunliaodong.cn/tags/Hibernate/"/>
    
    <category term="对象状态" scheme="https://www.sunliaodong.cn/tags/%E5%AF%B9%E8%B1%A1%E7%8A%B6%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>Java系统化学习之异常</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%BC%82%E5%B8%B8/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%BC%82%E5%B8%B8/</id>
    <published>2021-02-04T09:36:56.000Z</published>
    <updated>2021-02-04T09:43:09.960Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在Java中任务或方法的运行，要不就是正常执行完成(包括虚拟机退出，比如&lt;code&gt;System.exit()&lt;/code&gt;)，要不就是出现异常终止(&lt;code&gt;Throwable&lt;/code&gt;)。本章节重点讲解在Java中对异常的处理。当程序出现异常之后，Java会抛出一个封装好的异常堆栈信息，并且终止当前的方法，异常处理机制会将代码执行交给异常处理器。整体结构如下图所示：&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;

&lt;img src=&quot;/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%BC%82%E5%B8%B8/1587714125412.png&quot; class title=&quot;Java异常架构图&quot;&gt;

&lt;/div&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="异常" scheme="https://www.sunliaodong.cn/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Java系统化学习之泛型</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%B3%9B%E5%9E%8B/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%B3%9B%E5%9E%8B/</id>
    <published>2021-02-04T09:33:34.000Z</published>
    <updated>2021-02-04T09:34:16.124Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;泛型在JDK1.5引入，其本质是一种&lt;strong&gt;参数化类型（Parameterized Type），在使用时传入实际类型即可&lt;/strong&gt;，即可以将操作的数据类型指定为方法签名中的一种特殊参数,可以作用在类、接口、方法中。泛型是编译期的一种概念，主要是用于编译期类型安全检查（编译之后泛型会被擦除）。&lt;/p&gt;
&lt;h3 id=&quot;常用泛型类型常量&quot;&gt;&lt;a href=&quot;#常用泛型类型常量&quot; class=&quot;headerlink&quot; title=&quot;常用泛型类型常量&quot;&gt;&lt;/a&gt;常用泛型类型常量&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;E：元素（Element），多用于java集合框架&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;K：关键字（Key）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;N：数字（Number）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;T：类型（Type）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;V：值（Value）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="泛型" scheme="https://www.sunliaodong.cn/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java系统化学习之反射</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8F%8D%E5%B0%84/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8F%8D%E5%B0%84/</id>
    <published>2021-02-04T09:18:34.000Z</published>
    <updated>2021-02-04T09:35:26.046Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink&quot; title=&quot;知识点&quot;&gt;&lt;/a&gt;知识点&lt;/h3&gt;&lt;div align=&quot;center&quot;&gt;

&lt;img src=&quot;/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8F%8D%E5%B0%84/1587523711269.png&quot; class title=&quot;反射知识点&quot;&gt;

&lt;/div&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="反射" scheme="https://www.sunliaodong.cn/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Java系统化学习之内部类</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Java%E7%B3%BB%E7%BB%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%86%85%E9%83%A8%E7%B1%BB/</id>
    <published>2021-02-04T09:16:48.000Z</published>
    <updated>2021-02-04T09:32:21.781Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;定义：外部类内部定义的类，类名不需要与文件名不同&lt;/li&gt;
&lt;li&gt;static修饰（静态内部类）&lt;/li&gt;
&lt;li&gt;作用域（public、default、protected、private）&lt;/li&gt;
&lt;li&gt;作用范围：编译期概念，一但编译成功就是有不同的class文件（outer.class和outer$inner.class），所以内部类的成员变量/方法名可以和外部类的相同。&lt;/li&gt;
&lt;li&gt;分类：静态内部类，成员内部类，局部内部类，匿名内部类四种。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h2&gt;&lt;p&gt;Ø 在一个方法内部使用&lt;br&gt;Ø 在方法的一个作用域中使用&lt;br&gt;Ø 一个匿名类，用于实现一个接口&lt;br&gt;Ø 一个匿名类，用于扩展拥有非默认构造器的类&lt;br&gt;Ø 一个匿名类，用于执行字段初始化&lt;br&gt;Ø 一个匿名类，通过实例初始化进行构建（匿名内部类不能拥有构造器)  &lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="内部类" scheme="https://www.sunliaodong.cn/tags/%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java高效编程技巧</title>
    <link href="https://www.sunliaodong.cn/2021/02/04/Java%E9%AB%98%E6%95%88%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    <id>https://www.sunliaodong.cn/2021/02/04/Java%E9%AB%98%E6%95%88%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/</id>
    <published>2021-02-04T08:27:17.000Z</published>
    <updated>2021-02-04T08:30:34.594Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;Java代码规范&quot;&gt;&lt;a href=&quot;#Java代码规范&quot; class=&quot;headerlink&quot; title=&quot;Java代码规范&quot;&gt;&lt;/a&gt;Java代码规范&lt;/h2&gt;&lt;h3 id=&quot;命名规范（阿里规范）&quot;&gt;&lt;a href=&quot;#命名规范（阿里规范）&quot; class=&quot;headerlink&quot; title=&quot;命名规范（阿里规范）&quot;&gt;&lt;/a&gt;命名规范（阿里规范）&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;名称只能是有含义的英文，不能出现下划线或美元符号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方法名、参数名、成员变量、局部变量统一使用驼峰方式命名，形如lowerCamelCase&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类名使用UpperCamelCase命名，DO/BO/DTO/VO/AO/PO/UID除外&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常量或类变量都需要使用大写，并且中间使用下划线分割&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;抽象类必须以Abstract或Base开头，异常类，必须以Exception结果，测试类必须以待测试代码_Test&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类型与中括号紧挨相连来表示数组,形如&lt;code&gt;int[] arrayDemo&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;成员变量不能以is开头&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;包使用小写定义，并且使用单数，中间使用英文句号分割，并且定义必须有意义和唯一性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;子类与父类之间不要使用相同的成员变量命名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;完全杜绝不规范的缩写，尽量使用完整的单词&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在常量与变量命名时，表示类型的名称放在词尾&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果模块、接口、类、方法使用了设计模式，在命名时需体现出具体模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接口中不要定义变量，方式不需要增加任何修饰符，都必须有注释信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接口与实现类的命名规范是&lt;strong&gt;Service/**ServiceImpl、&lt;/strong&gt;DAO/**DAOImpl&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;枚举类名带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;各层命名规范：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Service/DAO 层方法命名规约&lt;ul&gt;
&lt;li&gt;获取单个对象的方法用 get 做前缀。&lt;/li&gt;
&lt;li&gt;获取多个对象的方法用 list 做前缀，复数形式结尾如：listObjects。&lt;/li&gt;
&lt;li&gt;获取统计值的方法用 count 做前缀。&lt;/li&gt;
&lt;li&gt;插入的方法用 save/insert 做前缀。&lt;/li&gt;
&lt;li&gt;删除的方法用 remove/delete 做前缀。&lt;/li&gt;
&lt;li&gt;修改的方法用 update 做前缀。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;领域模型命名规约&lt;ul&gt;
&lt;li&gt;数据对象：xxxDO，xxx 即为数据表名。&lt;/li&gt;
&lt;li&gt;数据传输对象：xxxDTO，xxx 为业务领域相关的名称。&lt;/li&gt;
&lt;li&gt;展示对象：xxxVO，xxx 一般为网页名称。&lt;/li&gt;
&lt;li&gt;POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="软件架构" scheme="https://www.sunliaodong.cn/categories/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="Java" scheme="https://www.sunliaodong.cn/tags/Java/"/>
    
    <category term="编程技巧" scheme="https://www.sunliaodong.cn/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
</feed>
